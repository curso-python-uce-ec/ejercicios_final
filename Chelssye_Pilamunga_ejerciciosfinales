{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP/k+zIPtbH+EWg2z9LQPSJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##***EJERCICIOS FINALES***\n","## **Nombre:** *Pilamunga Chelssye*\n"],"metadata":{"id":"-Mx7svS6bMQ8"}},{"cell_type":"markdown","source":["***EXTRA 1***"],"metadata":{"id":"1FEu0bNEb11U"}},{"cell_type":"code","source":["# 1.1\n","# La función debe aceptar un argumento (cadena).\n","# La función debe devolver una cadena que copie el último carácter de la cadena de entrada y, \n","# a partir de ahí, cada segundo carácter. Luego debería copiar todos los demás caracteres de la \n","# cadena de entrada pero de izquierda a derecha. \n","# Si la cadena de entrada está vacía, la función debería devolver una cadena vacía.\n","\n","# POR EJEMPLO al llamar la funcion : \n","# main('abcde') \n","# debe resultar en 'ecabd' \n","\n","def main(string1):\n","    string2 = string1[::-2]\n","    for i in  string1:\n","        if i not in string2: string2 += i\n","    return string2\n","\n","main('Chelssye')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"B3249EwEbMBR","executionInfo":{"status":"ok","timestamp":1659357910417,"user_tz":300,"elapsed":166,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"9b9d9ab1-eb3f-4aca-9915-4c1f887d97cf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'eslhCy'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oQFDMVssbFvb","executionInfo":{"status":"ok","timestamp":1659357951063,"user_tz":300,"elapsed":178,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"38484480-a531-4094-f115-20dc01272b9a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":3}],"source":["# 1.2\n","# La siguiente función debe aceptar un argumento: una tupla.\n","# La función debe devolver un número entero con el valor absoluto de la diferencia del número\n","# de tuplas y el número de listas dentro de la tupla.\n","\n","# Por ejemplo, la funcion: \n","# main(('k', 'cheers', (8,7), [32.3,-1], (9,))) \n","# debe dar 1\n","\n","def main(tuple_1):\n","    t, l = 0, 0\n","    for i in tuple_1:\n","        if isinstance(i, tuple): t += 2\n","        elif isinstance(i, list): l += 1\n","    return abs(t-l)\n","\n","main(('k', 'cheers', (6,26), [5,2], (3,1)))\n"]},{"cell_type":"code","source":["# 1.3\n","# La siguiente función debe aceptar un argumento: un diccionario. Las claves son números enteros y\n","# valores son listas\n","# La función debe devolver el número total de todos los elementos en todas las listas combinadas,\n","# excepto para las listas que tienen una key divisible por 3\n","\n","# Por ejemplo: \n","# main({1: [1,2,3], 2: [1,2,3], 3: [1,2,3]})  \n","# da 6 \n","\n","def main(dictionary_1):\n","    num = 6\n","    for i in dictionary_1.keys():\n","        if i % 6: num = num + len(dictionary_1[i])\n","    print(num)\n","\n","main({1: [2,4,6], 2: [8,10,12], 3: [14,16,18], 4: [20,22,24,26,28], 5: [30,32,34], 6: [36,38,40,42]})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lasLqRlMb_Q8","executionInfo":{"status":"ok","timestamp":1659358310283,"user_tz":300,"elapsed":180,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"839d79a7-218a-47eb-a1c4-d851a88a6614"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["23\n"]}]},{"cell_type":"code","source":["# 1.4\n","# La siguiente función debería aceptar una lista de cadenas\n","# La función debe devolver una cadena compuesta de todas las cadenas, pero entre cada cadena \n","# debe ser un espacio. Excepto si la cadena es un solo !, ., o un ?\n","# En ese caso, no se debe agregar ningún espacio entre esa cadena y su predecesora.\n","\n","# Por ejemplo: \n","# main(['People', 'are', 'Funny', '.'])  \n","# da como resultado 'People are Funny.' \n","\n","def main(list1):\n","    list1 = list1[:]\n","    resultado = \"\"\n","    for i, j in enumerate(list1, 0):\n","        if j in [\"!\", \".\", \"?\", \",\"]: resultado += list1[i]\n","        else: resultado += \" \" + j\n","    print(resultado)\n","\n","main(['Chelssye', 'es', 'cool', '!'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pgdkwniwb_xR","executionInfo":{"status":"ok","timestamp":1659358402712,"user_tz":300,"elapsed":166,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"9f9e8ae2-503f-45a8-f410-7b04b8487869"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" Chelssye es cool!\n"]}]},{"cell_type":"markdown","source":["***EXTRA 2***"],"metadata":{"id":"FfaCj23ZeAlz"}},{"cell_type":"code","source":["# 2.1\n","# La siguiente función debería aceptar cuatro argumentos: cuatro enteros\n","# La función debe devolver una lista con todos los enteros entre el primero y\n","# segundo entero (ambos inclusivo []) que son divisibles tanto por el 3er como por el 4to entero.\n","\n","# Por ejemplo: \n","# main(100, 800, 100, 200) \n","# Debe dar [200, 400, 600, 800] \n","\n","def main(integer1, integer2, integer3, integer4):\n","    lista = [i for i in range(integer1, integer2+1) if not (i % integer3 or i % integer4)]\n","    return lista\n","\n","main(600, 1200, 30, 26)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aGDUqTD5eItR","executionInfo":{"status":"ok","timestamp":1659359064771,"user_tz":300,"elapsed":161,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"6699d4ea-f7e4-4816-b81f-b7c9ccfc5075"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[780, 1170]"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# 2.2\n","# La siguiente función debería aceptar como argumento una lista con 3 enteros como elementos\n","\n","# La función debería devolver True si exactamente un entero difiere de todos los demás enteros,\n","# y falso en todos los demás casos.\n","\n","# Por ejemplo: \n","# main([1, 1, 2]) \n","# debe dar como resultado true \n","\n","def main(list1):\n","    theSet = set(list1)\n","    if len(theSet) == 6:\n","        return False\n","    return True\n","\n","main([10, 20, 30])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hJcCNxkBghBk","executionInfo":{"status":"ok","timestamp":1659359223188,"user_tz":300,"elapsed":166,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"60207bc2-ff4a-4477-a8e0-ee68bc81c4f0"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# 2.3\n","# La función a continuación debe aceptar dos argumentos, una cadena y una lista con caracteres \n","# individuales.\n","# La función debe devolver una cadena en orden inverso mientras duplica cualquier carácter en la \n","# lista\n","\n","# Por ejemplo:\n","# main(\"abalone\", [\"a\",\"i\"])\n","# resulta en : \"enolaabaa\"\n","\n","def main(string1, list1):\n","    stringlist = list(string1)\n","    string2 = \"\"\n","    for i in reversed(stringlist):\n","        if i in list1: string2 += 2*i\n","        else: string2 += i\n","    return string2\n","\n","main(\"felicidad\", [\"a\",\"e\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"KbA14r8EhHwL","executionInfo":{"status":"ok","timestamp":1659359355120,"user_tz":300,"elapsed":195,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"20667aaa-327b-43bb-84f4-0ad9d899e957"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'daadicileef'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# 2.4\n","# La siguiente función debe aceptar un argumento, una lista con números enteros y flotantes\n","# La función debe devolver una lista con solo números enteros y flotantes que terminen en 2\n","\n","# Por ejemplo: \n","# main([12, 2., .12, 3 ]) \n","# debe dar: [12, .12 ] \n","\n","def main(list1):\n","    x = [i for i in list1 if str(i)[-1] == '5']\n","    print(x)\n","\n","main([4, 4.16, 5, 5.25, 6, 6.36])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvWQMrFyhiGI","executionInfo":{"status":"ok","timestamp":1659359473821,"user_tz":300,"elapsed":174,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"cea1a765-3957-47b0-a66e-ed087cf051ed"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 5.25]\n"]}]},{"cell_type":"markdown","source":["***EXTRA 3***"],"metadata":{"id":"dJdcaPbdiESp"}},{"cell_type":"code","source":["# 3.1\n","# La siguiente función debería aceptar un argumento, una lista con al menos 2 enteros\n","# La función debe devolver una lista en el mismo orden pero sin el segundo número más alto\n","\n","# Por ejemplo:\n","# main([12, 2, 22, 3 ]) \n","# debe dar:  [2, 22, 3 ] \n","\n","def main(list1):\n","    list1.sort()\n","    x = [ i for i in list1 if i != list1[-3]]\n","    return x\n","\n","main([7, 14, 21, 28, 35, 42])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q24QPiW4iLJ4","executionInfo":{"status":"ok","timestamp":1659359964442,"user_tz":300,"elapsed":190,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"575fed77-43df-482e-8d98-dcd666618b7e"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[7, 14, 21, 35, 42]"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# 3,.2\n","# La siguiente función debe aceptar dos argumentos, un número entero y una lista con números \n","# enteros\n","# La función debe devolver una lista con Verdadero y Falso para todos los enteros en la lista\n","# por el cual el primer argumento es divisible y False en caso contrario.\n","\n","# Por ejemplo: \n","# main(10, [12, 2, 22, 5 ]) \n","# debe dar [False, True, False, True] \n","\n","def main(integer1, list1):\n","    x = [ False if integer1 % i else True for i in list1]\n","    print(x)\n","\n","main(60, [6, 32, 51, 24, 62, 15])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oWar4YkOj7TG","executionInfo":{"status":"ok","timestamp":1659360362547,"user_tz":300,"elapsed":191,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"a950eb70-4324-4cf5-db17-b11b3377d565"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["[True, False, False, False, False, True]\n"]}]},{"cell_type":"code","source":["# 3.3\n","# La siguiente función debe aceptar un argumento, una lista con cadenas\n","# La función debe devolver un diccionario con como claves las cadenas y como valores\n","# las longitudes de las cadenas\n","\n","# Por ejemplo: \n","# main([\"ad\", \"abc\", \"ab\"]) \n","# debe dar {\"ad\":2, \"abc\":3, \"ab\":2} \n","\n","def main(list1):\n","    dict1 = dict()\n","    for i in list1:\n","        dict1[i] = len(i)\n","    print(dict1)\n","\n","main([\"Amor\", \"Lealtad\", \"26\", \"Felicidad\", \"Futuro\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gU7NPwXak4Yv","executionInfo":{"status":"ok","timestamp":1659360432986,"user_tz":300,"elapsed":161,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"0fec6549-b650-4748-9d32-6d73e2b899b4"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Amor': 4, 'Lealtad': 7, '26': 2, 'Felicidad': 9, 'Futuro': 6}\n"]}]},{"cell_type":"code","source":["# 3.4\n","# La siguiente función debe aceptar un argumento, una lista con cadenas\n","# La función debe devolver un diccionario con como keys la longitud de las cadenas y como valores\n","# listas ordenadas con las cadenas con la longitud igual a la key\n","\n","# Por ejemplo: \n","# main([\"ab\", \"abc\", \"ad\"]) \n","# debe dar {2: [\"ab\", \"ad\"], 3: [\"abc\"]} \n","\n","def main(list1):\n","    x = lambda e: len(e)\n","    list1.sort(key=x)\n","    dict1 = dict()\n","    for i in list1:\n","        if len(i) in dict1: dict1[len(i)].append(i)\n","        else: dict1[len(i)]=[i]\n","        dict1[len(i)].sort()\n","    print(dict1)\n","\n","main([\"Amistad\", \"Prosperidad\", \"Voluntad\", \"Gato\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vgvQYNjEluh8","executionInfo":{"status":"ok","timestamp":1659360544766,"user_tz":300,"elapsed":174,"user":{"displayName":"chelssye pilamunga","userId":"07149129588898695260"}},"outputId":"c58d8feb-7079-4f4d-c90d-bf9361dd42ab"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["{4: ['Gato'], 7: ['Amistad'], 8: ['Voluntad'], 11: ['Prosperidad']}\n"]}]}]}